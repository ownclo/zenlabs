#!/usr/bin/env ruby
require 'rubygems'
require 'thor'

# ABSOLUTE PATHS ARE COOL!
labs_root = '/home/ownclo/workspace/zenlabs'

lib_path = File.join labs_root, 'lib'
$:.unshift(lib_path)

require 'latex'
require 'gnuplot'

module ZenLabsCLI
  class Generate < Thor
    include Thor::Actions

    desc "generate INP.dat RULE.py [OUTP.dat]",
      "Creates a new table from source table and a set of rules"
    def table inp, rule, outp=NIL
      processor_name = "process_#{rule}"
      copy_file "templates/tables/processor/rules_template.py",
        processor_name

      insert_into_file processor_name,
        :after => "#<<-- INSERT YOUR RULES HERE -->>\n" do
        File.read(rule)
        end

      # inp.dat + rule1.rb => inp_rule1.dat
      inp_short = inp.split('.')[0]
      rule_short = rule.split('.')[0]
      outp ||= "#{inp_short}_#{rule_short}.dat"

      # YOYOYOYO python will do the trick
      run("python #{processor_name} #{inp} #{outp}")
    end

    # zenlabs generate plot table.dat "1:2,1:3,4:5" [out.pdf]
    desc "plot INP.dat SPEC_STRING [out.pdf]",
      "Generates a PDF plot with GnuPlot via Specification string"
    def plot table_name, spec_string="1:2", out=NIL
      # -1. Create filenames.
      prefix = table_name.split('.')[0]
      out ||= prefix + "_plot.pdf"
      script_name = prefix + ".gp"

      # 0. Copy gnuplot script template into project.
      copy_file "templates/plots/plot.gp", script_name

      # 1. Insert OUT_NAME
      insert_into_file script_name,
        :after => "#<<--INSERT OUTPUT FILE NAME HERE-->>\n" do
        "set output \"#{out}\"\n"
        end

      # 2. Insert INP_NAME
      insert_into_file script_name,
        :after => "#<<--INSERT INPUT FILE NAME HERE-->>\n" do
        "plot \"#{table_name}\"\\\n"
      end

      # 3. Parse spec_string
      columns = Gnuplot::Parser.parse spec_string

      # 4. For each curve, insert its points and splines.
      plots = Gnuplot::Plotter.new.plot_from_columns columns

      # 5. Insert them into a script
      insert_into_file script_name,
        :after => "#<<--INSERT PLOTTING INSTRUCTIONS HERE-->>\n" do
        plots
      end

      # 6. Run 'gnuplot' on generated script
      run("gnuplot #{script_name}")
    end
  end

  class Add < Thor
    include Thor::Actions

    desc "add table table.dat [SECTION]", "Generates latex table code and include it to SECTION"
    def table table_name, section='tables'
      # 1. Count columns
      begin
        contents = File.read table_name
      rescue Errno::ENOENT
        puts "File does not exist, NOWAY"
        exit -1
      end
      num_cols = LATEX::Table.count_cols(contents)

      # 2. Filter with 'tolatex'
      latex_table = run("script/tolatex < #{table_name}", :capture => true)

      # TOLATEX works fine while in terminal or vim,
      # but is not processed properly by ruby.
      # So we need to manually add yet another
      # backslash to the end of each line
      latex_table = latex_table.lines.map do |line|
        new_line = line.split("\n")[0]
        new_line += "\\\\"
      end.join("\n")

      # 3. Copy template
      outp_table = "#{table_name.split('.')[0]}.tex"
      copy_file "templates/tables/generator/table.tex",
        outp_table

      # 4. Add filtered lines to template
      insert_into_file outp_table,
        :after => "%<<--INSERT CONTENTS HERE-->>\n" do
        latex_table
        end

      # 5. Modify {cccccc} to right number of times
      insert_into_file outp_table,
        :after => "%<<--INSERT TABULAR HEADER HERE-->>\n" do
        "\\begin{tabular}{#{'c'*num_cols}} % ##{num_cols} columns\n"
        end

      # 6. Add \input{out_table} to 'section.tex' file
      append_to_file "#{section}.tex" do
        "\\input{#{outp_table.split(".tex")[0]}}"
      end
    end
  end

  class ZenLabs < Thor
    include Thor::Actions

    desc "welcome", "Prints welcome message"
    def welcome
      puts <<-WELCOME
    Good day, Gentlemen!

    Pray cast a look at this primitive app for creating
    labs. Type:
      $ labs new lab_name
    to see what this baby can do. Best of lucks!
      WELCOME
    end

    desc "new PROJECT_NAME", "Creates a scaffold lab directory"
    def new project_name
      puts "Creating new lab at '#{project_name}/' ..."
      directory "./templates/scaffold", "#{project_name}"
      directory "./templates/tables", "#{project_name}/templates/tables"
      directory "./script", "#{project_name}/script"

      # RENAMING ACTION IS MISSING IN THOR
      FileUtils.mv("#{project_name}/lab.tex",
                   "#{project_name}/#{project_name}.tex")

      say_status("rename", "#{project_name}/lab.tex -> #{project_name}/#{project_name}.tex")

      prepend_to_file "#{project_name}/makefile" do
        "PROJECT_NAME=#{project_name}.tex\n"
      end
    end

    desc "generate [table|plot] SUBCOMMANDS",
      "Generates tables and plots"
    subcommand "generate", Generate

    desc "add [table|plot] SUBCOMMANDS", "Includes item to the report"
    subcommand "add", Add
  end
end

# SOOO DUMMY
ZenLabsCLI::ZenLabs.source_root labs_root
ZenLabsCLI::Add.source_root labs_root
ZenLabsCLI::Generate.source_root labs_root

ZenLabsCLI::ZenLabs.start(ARGV)
